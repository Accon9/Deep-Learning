import torch
import torch.nn as nn
import numpy as np

torch.manual_seed(1)
np.random.seed(1)

BATCH_SIZE = 64
LR_G = 0.0001
LR_D = 0.0001
N_IDEAS = 5             # 可以理解为新手画家的随机想法
ART_COMPONENTS = 15     # 随机生成的15个y轴的点，可以理解为新手画家画出的15个点
PAINT_POINTS = np.vstack([np.linspace(-1, 1, ART_COMPONENTS) for _ in range(BATCH_SIZE)])

def artist_works():     # painting from the famous artist (real target)
    a = np.random.uniform(1, 2, size=BATCH_SIZE)[:, np.newaxis]
    paintings = a * np.power(PAINT_POINTS, 2) + (a-1)
    paintings = torch.from_numpy(paintings).float()
    return paintings
G = nn.Sequential(                      # 新手画家
    nn.Linear(N_IDEAS, 128),
    nn.ReLU(),
    nn.Linear(128, ART_COMPONENTS),
)

D = nn.Sequential(                      # 鉴赏家
    nn.Linear(ART_COMPONENTS, 128),     # 接受新手画家画出的15个点
    nn.ReLU(),
    nn.Linear(128, 1),                  # 判别接受的数据是新手画家还是著名画家
    nn.Sigmoid(),                       # 对上行转换为概率
)

opt_D = torch.optim.Adam(D.parameters(), lr=LR_D)
opt_G = torch.optim.Adam(G.parameters(), lr=LR_G)

# plt.ion()

for step in range(10000):

    artist_paintings = artist_works()   # 注明画家画的画
    G_ideas = torch.randn(BATCH_SIZE, N_IDEAS, requires_grad=True)
    G_paintings = G(G_ideas)  # 新手画家用随机想法创造出来的画
    prob_artist1 = D(G_paintings)

    G_loss = torch.mean(torch.log(1. - prob_artist1))
    opt_G.zero_grad()
    G_loss.backward()
    opt_G.step()

    prob_artist0 = D(artist_paintings)  # 画作来自于著名画家的概率
    prob_artist1 = D(G_paintings.detach())  # 画作来自于新手画家的概率

    D_loss = - torch.mean(torch.log(prob_artist0) + torch.log(1. - prob_artist1))
    opt_D.zero_grad()
    D_loss.backward(retain_graph=True)  # # retain_graph 这个参数是为了再次使用计算图纸，保留参数
    opt_D.step()


#     if step % 50 == 0:  # plotting
#         plt.cla()
#         plt.plot(PAINT_POINTS[0], G_paintings.data.numpy()[0], c='#4AD631', lw=3, label='Generated painting', )
#         plt.plot(PAINT_POINTS[0], 2 * np.power(PAINT_POINTS[0], 2) + 1, c='#74BCFF', lw=3, label='upper bound')
#         plt.plot(PAINT_POINTS[0], 1 * np.power(PAINT_POINTS[0], 2) + 0, c='#FF9359', lw=3, label='lower bound')
#         plt.text(-.5, 2.3, 'D accuracy=%.2f (0.5 for D to converge)' % prob_artist0.data.numpy().mean(),
#                  fontdict={'size': 13})
#         plt.text(-.5, 2, 'D score= %.2f (-1.38 for G to converge)' % -D_loss.data.numpy(), fontdict={'size': 13})
#         plt.ylim((0, 3));
#         plt.legend(loc='upper right', fontsize=10);
#         plt.draw();
#         plt.pause(0.01)
#
# plt.ioff()
# plt.show()
